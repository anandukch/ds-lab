// binary tree using linked list

#include <stdio.h>
#include <stdlib.h>
typedef struct Node
{
  int data;
  struct Node *left;
  struct Node *right;
} Node;

typedef struct
{
  Node *root;
} BinTree;
// void initializeInsertion(Node*);

BinTree *createTree()
{
  BinTree *tree = (BinTree *)malloc(sizeof(BinTree));
  tree->root = NULL;
  return tree;
}

Node *createNode()
{
  Node *newNode = (Node *)malloc(sizeof(Node));
  newNode->left = NULL;
  newNode->right = NULL;
  return newNode;
};

void insertNode(int data, Node *node)
{
  // if (node == NULL)
  // {
  //   return;
  // }
  char choice;
  node->data = data;
  printf("Does the node %d has left child : y/n : ", data);
  scanf("%s", &choice);
  if (choice == 'y')
  {
    printf("Enter the left child data: ");
    int leftChildData;
    scanf("%d", &leftChildData);
    node->left = createNode();
    insertNode(leftChildData, node->left);
  }
  printf("Does the node %d has right child  : y/n : ", data);
  scanf("%s", &choice);
  if (choice == 'y')
  {
    printf("Enter the right child data: ");
    int rightChildData;
    scanf("%d", &rightChildData);
    node->right = createNode();
    insertNode(rightChildData, node->right);
  }
}
void initializeInsertion(Node *root)
{

  int item;
  printf("Enter the root node data: ");
  scanf("%d", &item);
  insertNode(item, root);
};

// void insertNode(Node *node, int data){
//   if(node == NULL){
//     node = createNode(data);
//     return;
//   }
//   if(data > node->data)
//     if(node->right != NULL)
//       return insertNode(node->right, data);
//     else
//       node->right = createNode(data);
//   else
//     if(node->left != NULL)
//       return insertNode(node->left, data);
//     else
//       node->left = createNode(data);
// }
void inorderTraversal(Node *node)
{
  if (node != NULL)
  {
    inorderTraversal(node->left);
    printf("%d ", node->data);
    inorderTraversal(node->right);
  }
}

int main()
{
  Node *root = createNode();
  // Node *root=createNode(10);
  // root->left = createNode(5);
  // root->right = createNode(15);
  // root->left->left = createNode(2);
  // root->left->right = createNode(7);
  // root=createNode(10);
  // insertNode(root,5);
  // insertNode(root,15);
  // insertNode(root,20);
  initializeInsertion(root);

  inorderTraversal(root);
}